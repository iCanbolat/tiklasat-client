/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardProductsRouteImport } from './routes/dashboard/products/route'
import { Route as DashboardCategoriesRouteImport } from './routes/dashboard/categories/route'
import { Route as DashboardProductsIndexImport } from './routes/dashboard/products/index'
import { Route as DashboardOrdersIndexImport } from './routes/dashboard/orders/index'
import { Route as DashboardCategoriesIndexImport } from './routes/dashboard/categories/index'
import { Route as DashboardCategoriesCategoryIdImport } from './routes/dashboard/categories/$categoryId'
import { Route as DashboardProductsProductIdRouteImport } from './routes/dashboard/products/$productId/route'
import { Route as DashboardProductsProductIdIndexImport } from './routes/dashboard/products/$productId/index'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardProductsRouteRoute = DashboardProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardCategoriesRouteRoute = DashboardCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardProductsIndexRoute = DashboardProductsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardProductsRouteRoute,
} as any)

const DashboardOrdersIndexRoute = DashboardOrdersIndexImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardCategoriesIndexRoute = DashboardCategoriesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardCategoriesRouteRoute,
} as any)

const DashboardCategoriesCategoryIdRoute =
  DashboardCategoriesCategoryIdImport.update({
    id: '/$categoryId',
    path: '/$categoryId',
    getParentRoute: () => DashboardCategoriesRouteRoute,
  } as any)

const DashboardProductsProductIdRouteRoute =
  DashboardProductsProductIdRouteImport.update({
    id: '/$productId',
    path: '/$productId',
    getParentRoute: () => DashboardProductsRouteRoute,
  } as any)

const DashboardProductsProductIdIndexRoute =
  DashboardProductsProductIdIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardProductsProductIdRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/categories': {
      id: '/dashboard/categories'
      path: '/categories'
      fullPath: '/dashboard/categories'
      preLoaderRoute: typeof DashboardCategoriesRouteImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/products': {
      id: '/dashboard/products'
      path: '/products'
      fullPath: '/dashboard/products'
      preLoaderRoute: typeof DashboardProductsRouteImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/products/$productId': {
      id: '/dashboard/products/$productId'
      path: '/$productId'
      fullPath: '/dashboard/products/$productId'
      preLoaderRoute: typeof DashboardProductsProductIdRouteImport
      parentRoute: typeof DashboardProductsRouteImport
    }
    '/dashboard/categories/$categoryId': {
      id: '/dashboard/categories/$categoryId'
      path: '/$categoryId'
      fullPath: '/dashboard/categories/$categoryId'
      preLoaderRoute: typeof DashboardCategoriesCategoryIdImport
      parentRoute: typeof DashboardCategoriesRouteImport
    }
    '/dashboard/categories/': {
      id: '/dashboard/categories/'
      path: '/'
      fullPath: '/dashboard/categories/'
      preLoaderRoute: typeof DashboardCategoriesIndexImport
      parentRoute: typeof DashboardCategoriesRouteImport
    }
    '/dashboard/orders/': {
      id: '/dashboard/orders/'
      path: '/orders'
      fullPath: '/dashboard/orders'
      preLoaderRoute: typeof DashboardOrdersIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/products/': {
      id: '/dashboard/products/'
      path: '/'
      fullPath: '/dashboard/products/'
      preLoaderRoute: typeof DashboardProductsIndexImport
      parentRoute: typeof DashboardProductsRouteImport
    }
    '/dashboard/products/$productId/': {
      id: '/dashboard/products/$productId/'
      path: '/'
      fullPath: '/dashboard/products/$productId/'
      preLoaderRoute: typeof DashboardProductsProductIdIndexImport
      parentRoute: typeof DashboardProductsProductIdRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardCategoriesRouteRouteChildren {
  DashboardCategoriesCategoryIdRoute: typeof DashboardCategoriesCategoryIdRoute
  DashboardCategoriesIndexRoute: typeof DashboardCategoriesIndexRoute
}

const DashboardCategoriesRouteRouteChildren: DashboardCategoriesRouteRouteChildren =
  {
    DashboardCategoriesCategoryIdRoute: DashboardCategoriesCategoryIdRoute,
    DashboardCategoriesIndexRoute: DashboardCategoriesIndexRoute,
  }

const DashboardCategoriesRouteRouteWithChildren =
  DashboardCategoriesRouteRoute._addFileChildren(
    DashboardCategoriesRouteRouteChildren,
  )

interface DashboardProductsProductIdRouteRouteChildren {
  DashboardProductsProductIdIndexRoute: typeof DashboardProductsProductIdIndexRoute
}

const DashboardProductsProductIdRouteRouteChildren: DashboardProductsProductIdRouteRouteChildren =
  {
    DashboardProductsProductIdIndexRoute: DashboardProductsProductIdIndexRoute,
  }

const DashboardProductsProductIdRouteRouteWithChildren =
  DashboardProductsProductIdRouteRoute._addFileChildren(
    DashboardProductsProductIdRouteRouteChildren,
  )

interface DashboardProductsRouteRouteChildren {
  DashboardProductsProductIdRouteRoute: typeof DashboardProductsProductIdRouteRouteWithChildren
  DashboardProductsIndexRoute: typeof DashboardProductsIndexRoute
}

const DashboardProductsRouteRouteChildren: DashboardProductsRouteRouteChildren =
  {
    DashboardProductsProductIdRouteRoute:
      DashboardProductsProductIdRouteRouteWithChildren,
    DashboardProductsIndexRoute: DashboardProductsIndexRoute,
  }

const DashboardProductsRouteRouteWithChildren =
  DashboardProductsRouteRoute._addFileChildren(
    DashboardProductsRouteRouteChildren,
  )

interface DashboardRouteRouteChildren {
  DashboardCategoriesRouteRoute: typeof DashboardCategoriesRouteRouteWithChildren
  DashboardProductsRouteRoute: typeof DashboardProductsRouteRouteWithChildren
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardOrdersIndexRoute: typeof DashboardOrdersIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardCategoriesRouteRoute: DashboardCategoriesRouteRouteWithChildren,
  DashboardProductsRouteRoute: DashboardProductsRouteRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardOrdersIndexRoute: DashboardOrdersIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/categories': typeof DashboardCategoriesRouteRouteWithChildren
  '/dashboard/products': typeof DashboardProductsRouteRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/login': typeof LoginIndexRoute
  '/dashboard/products/$productId': typeof DashboardProductsProductIdRouteRouteWithChildren
  '/dashboard/categories/$categoryId': typeof DashboardCategoriesCategoryIdRoute
  '/dashboard/categories/': typeof DashboardCategoriesIndexRoute
  '/dashboard/orders': typeof DashboardOrdersIndexRoute
  '/dashboard/products/': typeof DashboardProductsIndexRoute
  '/dashboard/products/$productId/': typeof DashboardProductsProductIdIndexRoute
}

export interface FileRoutesByTo {
  '/dashboard': typeof DashboardIndexRoute
  '/login': typeof LoginIndexRoute
  '/dashboard/categories/$categoryId': typeof DashboardCategoriesCategoryIdRoute
  '/dashboard/categories': typeof DashboardCategoriesIndexRoute
  '/dashboard/orders': typeof DashboardOrdersIndexRoute
  '/dashboard/products': typeof DashboardProductsIndexRoute
  '/dashboard/products/$productId': typeof DashboardProductsProductIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/categories': typeof DashboardCategoriesRouteRouteWithChildren
  '/dashboard/products': typeof DashboardProductsRouteRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/login/': typeof LoginIndexRoute
  '/dashboard/products/$productId': typeof DashboardProductsProductIdRouteRouteWithChildren
  '/dashboard/categories/$categoryId': typeof DashboardCategoriesCategoryIdRoute
  '/dashboard/categories/': typeof DashboardCategoriesIndexRoute
  '/dashboard/orders/': typeof DashboardOrdersIndexRoute
  '/dashboard/products/': typeof DashboardProductsIndexRoute
  '/dashboard/products/$productId/': typeof DashboardProductsProductIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/dashboard/categories'
    | '/dashboard/products'
    | '/dashboard/'
    | '/login'
    | '/dashboard/products/$productId'
    | '/dashboard/categories/$categoryId'
    | '/dashboard/categories/'
    | '/dashboard/orders'
    | '/dashboard/products/'
    | '/dashboard/products/$productId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/dashboard'
    | '/login'
    | '/dashboard/categories/$categoryId'
    | '/dashboard/categories'
    | '/dashboard/orders'
    | '/dashboard/products'
    | '/dashboard/products/$productId'
  id:
    | '__root__'
    | '/dashboard'
    | '/dashboard/categories'
    | '/dashboard/products'
    | '/dashboard/'
    | '/login/'
    | '/dashboard/products/$productId'
    | '/dashboard/categories/$categoryId'
    | '/dashboard/categories/'
    | '/dashboard/orders/'
    | '/dashboard/products/'
    | '/dashboard/products/$productId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboard",
        "/login/"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/categories",
        "/dashboard/products",
        "/dashboard/",
        "/dashboard/orders/"
      ]
    },
    "/dashboard/categories": {
      "filePath": "dashboard/categories/route.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/categories/$categoryId",
        "/dashboard/categories/"
      ]
    },
    "/dashboard/products": {
      "filePath": "dashboard/products/route.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/products/$productId",
        "/dashboard/products/"
      ]
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/dashboard/products/$productId": {
      "filePath": "dashboard/products/$productId/route.tsx",
      "parent": "/dashboard/products",
      "children": [
        "/dashboard/products/$productId/"
      ]
    },
    "/dashboard/categories/$categoryId": {
      "filePath": "dashboard/categories/$categoryId.tsx",
      "parent": "/dashboard/categories"
    },
    "/dashboard/categories/": {
      "filePath": "dashboard/categories/index.tsx",
      "parent": "/dashboard/categories"
    },
    "/dashboard/orders/": {
      "filePath": "dashboard/orders/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/products/": {
      "filePath": "dashboard/products/index.tsx",
      "parent": "/dashboard/products"
    },
    "/dashboard/products/$productId/": {
      "filePath": "dashboard/products/$productId/index.tsx",
      "parent": "/dashboard/products/$productId"
    }
  }
}
ROUTE_MANIFEST_END */
